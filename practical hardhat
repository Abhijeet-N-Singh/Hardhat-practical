1) Mention the differences between Hardhat and Truffle.
Answer-Hradhat is a development enviornment that helps developers compile,deploy, test, and debug their ethereum applications.
Hardhat is used through a local installatioin in our porject.
When we create enviornment it will be reproducible, and we can avoid the futur version conflicts.
Hardhat is faster in Migration process. whereas Truffle is poor in Migration process.
Hardhat consumes less gas fee during migration. whereas in Truffle, More gas fee required during migration.
In Hardhat Debugging is easy. But in Truffle debugging is not good as compared to Hardhat.



2) Write a Smart Contract and demonstrate the steps
involved in the process of compilation using Hardhat
Development Environment.
Answer-First we cerate a new project directory and cd into it.
	- mkdir Hardhat
	-cd Hardhat

Open terminal in your project directory and type.
	-npm install --save-dev hardhat

now that we have hardhat installed let's start a new hardhat project. we'll use npx to do node.js executes.
and creates a project.
	-npx hardhat

you'll be greeted with a CLI hardhat interface. Select the second option , "Create an empty hardhat.config.js" , presssing enter.

now lets intall other dependencies required to work with hardhat.
	-npm install --save-dev @nomiclabs/hardhat ethers @nomiclabs/hardhat-waffle ethereum-waffle chai

we need these dependencies to write automated test for contracts.

	-npm cache clean

getting the private key and added it to the config file of hardhat. we can get a private key from our MetaMask wallet.

from "Account Details"

click on "Export Private key"

getting testnet ethers from quicknode endpoint..

then setting up the config file..
	-// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.19;

import "hardhat/console.sol";

//This is the main building block for smart contracts.
contract Token {

    // Some string type variables to identify the token.
    string public name = "My Very First Hardhat Token";
    string public symbol = "MHT";

    // the fixed amount of tokens, stored in an unsigned integer type variable.
    uint256 public totalSupply = 1000000;

    // An address type variable is used to store ethereum accounts.
    address public owner;

    // A mapping is a key/value map. Here we store each account"s balancce.
    mapping(address => uint256) balances;

    // The Transfer event helps off-chain applications understand
    //that happens within your contract.
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    /**
    * Contract initialization.
    */
    constructor() {

        // The totalSupply is assigned to the transdaction sender , which is the
        // account that is deploying the contract.
        balances[msg.sender] = totalSupply;
        owner = msg.sender;
    }

    /**
     * A function to transfer tokens.
     *
     * The 'external' modifier makes a funcction *only* callable from *outside*
     * the contract.
     */
    function transfer(address to, uint256 amount) external {

        // Check is the transaction sender has enough tokens.
        // If 'require''s first argument avaluates to 'false' then the 
        // transaction will revert.
        require(balances [msg.sender] >= amount, "Not enough tokens");

        console.log(
        "Transferring from %s to %s %s tokens",
        msg.sender,
        to,
        amount
    );
    
        // Transfer the amount.
        balances[msg.sender] -= amount;
        balances[to] += amount;

        // Notify off-chain application of the transfer.
        emit Transfer(msg.sender, to, amount);
    }

    /**
     * Read only function to retrive the token of a given account.
     *
     *The 'view' modifier indicates that it doesn't modify the contarct's
     *state, which allows us to call it without excuting a transaction.
     */
    function balanceOf(address account) external view returns (uint256) {
        return balances[account];
    } 
}
save the file and compile the contract using the following hardhat command.
	-npx hardhat compile

test file const has to generated as Token.js
	-const { expect } = require("chai");

describe("Token contract", function () {
  it("Deployment should assign the total supply of tokens to the owner", async function () {
    const [owner] = await ethers.getSigners();

    const Token = await ethers.getContractFactory("Token");

    const hardhatToken = await Token.deploy();

    const ownerBalance = await hardhatToken.balanceOf(owner.address);

    expect(await hardhatToken.totalSupply()).to.equal(ownerBalance);
  });
});


deploying contract , by creating deploy.js file in a new directory named scripts.
	-// We require the Hardhat Runtime Environment explicitly here. This is optional
// but useful for running the script in a standalone fashion through `node <script>`.
//
// You can also run a script with `npx hardhat run <script>`. If you do that, Hardhat
// will compile your contracts, add the Hardhat Runtime Environment's members to the

const { ethers } = require("hardhat");

// global scope, and execute the script.
async function main() {
  const [deployer] = await ethers.getSigners();
  
  console.log("Deploying contrats with the account:", deployer.address);
  
  console.log("Account balance:", (await deployerr.getBalance()).toString());
  
  const Token = await ethers.getContractFactory("Token");
  const token = await Token.deploy();
  
  console.log("Token address:", token.address);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });

then save the follwing deploy the contract.
	-npx hardhat run scripts/deploy.js 
